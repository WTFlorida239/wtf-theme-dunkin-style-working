<!doctype html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Draft Pours - WTF | Welcome To Florida</title>
    <style>
      * { box-sizing: border-box; margin: 0; padding: 0; }
      body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: #f8f9fa; line-height: 1.6; }
      .header { background: #ff6600; color: white; padding: 15px 0; text-align: center; font-size: 24px; font-weight: bold; }
      .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
      .back-link { display: inline-block; color: #ff6600; text-decoration: none; font-weight: bold; font-size: 16px; margin-bottom: 20px; padding: 10px 15px; border: 2px solid #ff6600; border-radius: 5px; transition: all 0.3s ease; }
      .back-link:hover { background: #ff6600; color: white; }
      .product-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 40px; align-items: start; }
      .product-image { width: 100%; max-width: 400px; border-radius: 10px; box-shadow: 0 4px 15px rgba(0,0,0,0.1); }
      .product-details { background: white; padding: 30px; border-radius: 10px; box-shadow: 0 4px 15px rgba(0,0,0,0.1); }
      .product-title { font-size: 32px; color: #333; margin-bottom: 10px; font-weight: bold; }
      .product-price { font-size: 24px; color: #ff6600; font-weight: bold; margin-bottom: 15px; }
      .product-description { color: #666; margin-bottom: 30px; line-height: 1.6; font-size: 16px; }
      .selection-section { margin: 30px 0; border-bottom: 1px solid #eee; padding-bottom: 20px; }
      .selection-section:last-child { border-bottom: none; }
      .section-title { font-size: 18px; font-weight: bold; color: #333; margin-bottom: 15px; }
      .option-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 10px; }
      .option-button { padding: 15px; border: 3px solid #ddd; border-radius: 8px; text-align: center; background: white; cursor: pointer; transition: all 0.3s ease; color: #333; font-size: 14px; font-family: inherit; min-height: 60px; display: flex; align-items: center; justify-content: center; flex-direction: column; }
      .option-button:hover { border-color: #ff6600; transform: translateY(-2px); box-shadow: 0 4px 8px rgba(255,102,0,0.2); }
      .option-button.selected { background: #ff6600; color: white; border-color: #ff6600; font-weight: bold; }
      .quantity-controls { display: flex; align-items: center; gap: 15px; }
      .qty-btn { width: 40px; height: 40px; border: 2px solid #ff6600; background: white; color: #ff6600; border-radius: 50%; cursor: pointer; font-size: 18px; font-weight: bold; font-family: inherit; transition: all 0.3s ease; }
      .qty-btn:hover { background: #ff6600; color: white; transform: scale(1.1); }
      .qty-input { width: 80px; text-align: center; padding: 10px; border: 2px solid #ddd; border-radius: 5px; font-size: 16px; font-family: inherit; }
      .comments-textarea { width: 100%; padding: 12px; border: 2px solid #ddd; border-radius: 5px; resize: vertical; font-family: inherit; font-size: 14px; line-height: 1.4; }
      .comments-textarea:focus { border-color: #ff6600; outline: none; }
      .add-to-cart-btn { width: 100%; padding: 18px; background: #ff6600; color: white; border: none; border-radius: 8px; font-size: 18px; font-weight: bold; cursor: pointer; margin-top: 20px; font-family: inherit; transition: all 0.3s ease; }
      .add-to-cart-btn:hover { background: #e55a00; transform: translateY(-2px); box-shadow: 0 4px 12px rgba(255,102,0,0.3); }
      .add-to-cart-btn:disabled { background: #ccc; cursor: not-allowed; transform: none; box-shadow: none; }
      .success-message { background: #d4edda; color: #155724; padding: 15px; border-radius: 5px; margin: 15px 0; border: 1px solid #c3e6cb; display: none; font-size: 14px; line-height: 1.4; }
      .success-message.show { display: block; }
      .cart-status { position: fixed; top: 20px; right: 20px; background: #ff6600; color: white; padding: 10px 15px; border-radius: 25px; font-weight: bold; z-index: 1000; box-shadow: 0 4px 12px rgba(255,102,0,0.3); }
      .info-box { background: #e7f3ff; padding: 15px; border-radius: 8px; margin-bottom: 15px; color: #333; font-size: 14px; line-height: 1.4; }

      @media (max-width: 768px) {
        .product-grid { grid-template-columns: 1fr; }
        .option-grid { grid-template-columns: repeat(2, 1fr); }
        .product-details { padding: 20px; }
      }
    </style>

    <!-- Theme settings & per-page overrides -->
    <script>
      window.DRAFT_POURS_VARIANT_ID = {{ page.metafields.custom.draft_variant_id | default: settings.draft_pours_variant_id | json }};
    </script>
  </head>
  <body>
    <div class="header">WTF | Welcome To Florida</div>
    <div class="cart-status" id="cart-status">Cart: <span id="cart-count">0</span> items</div>

    <div class="container">
      <a href="/" class="back-link">‚Üê Back to Menu</a>

      <div class="product-grid">
        <div class="product-image-section">
          <img src="{{ 'wtf_drafts_150x150.png' | asset_url }}" alt="Draft Pours" class="product-image">
          <img src="{{ 'draft-pours_150x150.png' | asset_url }}" alt="Draft Pours" class="product-image">
        </div>

        <div class="product-details">
          <h1 class="product-title">Draft Pours</h1>
          <div class="product-price" id="product-price">$15.00 per 16 oz pour</div>
          <p class="product-description">
            Fresh draft pours from our rotating taps. All served in 16 oz pours with premium quality ingredients.
          </p>

          <!-- Draft (single select) -->
          <div class="selection-section">
            <h3 class="section-title">üç∫ Choose Your Draft (16 oz only)</h3>
            <div class="info-box">
              <strong>Rotating Taps:</strong> Our selection changes regularly. Current offerings below.
            </div>
            <div class="option-grid" id="draft-options">
              <button type="button" class="option-button" data-draft="Five Flowers Lemonade" data-price="15.00">
                Five Flowers Lemonade
              </button>
              <button type="button" class="option-button" data-draft="Tea Time Watermelon" data-price="15.00">
                Tea Time Watermelon
              </button>
              <button type="button" class="option-button" data-draft="Mitra9 Dragonfruit" data-price="15.00">
                Mitra9 Dragonfruit
              </button>
              <button type="button" class="option-button" data-draft="Tea Time Orange Citrus" data-price="15.00">
                Tea Time Citrus
              </button>
              <button type="button" class="option-button" data-draft="White Rabbit Rootbeer" data-price="15.00">
                White Rabbit Rootbeer
              </button>
              <button type="button" class="option-button" data-draft="BBCO Perfect Pear" data-price="15.00">
                BBCO Perfect Pear
              </button>
              <button type="button" class="option-button" data-draft="Mitra9 Rasberry Lime" data-price="15.00">
                Mitra9 Rasberry Lime
              </button>
              <button type="button" class="option-button" data-draft="BBCO Lemon Poundcake" data-price="15.00">
                Lemon Poundcake
              </button>
            </div>
          </div>

          <!-- Comments -->
          <div class="selection-section">
            <h3 class="section-title">üí¨ Special Requests & Comments</h3>
            <textarea
              id="order-comments"
              class="comments-textarea"
              placeholder="Any special requests or modifications? We'll try to accommodate!"
              rows="3"
            ></textarea>
          </div>

          <!-- Quantity -->
          <div class="selection-section">
            <h3 class="section-title">üî¢ Quantity</h3>
            <div class="quantity-controls">
              <button type="button" class="qty-btn" onclick="changeQuantity(-1)">‚àí</button>
              <input type="number" id="quantity" value="1" min="1" max="50" class="qty-input">
              <button type="button" class="qty-btn" onclick="changeQuantity(1)">+</button>
            </div>
          </div>

          <div id="success-message" class="success-message"></div>

          <button type="button" id="add-to-cart-btn" class="add-to-cart-btn" onclick="addToCart()">
            Add to Cart - $15.00
          </button>
        </div>
      </div>
    </div>

    <script>
      // -------- State --------
      let selectedDraft = null;
      let basePrice = 15.0;

      // -------- Init --------
      document.addEventListener('DOMContentLoaded', () => {
        wireDraftButtons();
        // Default: select the first draft for good UX
        const first = document.querySelector('#draft-options .option-button');
        if (first) first.click();

        updateCartCount();
        updatePrice();
      });

      function wireDraftButtons() {
        document.querySelectorAll('#draft-options .option-button').forEach((btn) => {
          btn.addEventListener('click', () => {
            document.querySelectorAll('#draft-options .option-button').forEach((b) => b.classList.remove('selected'));
            btn.classList.add('selected');

            selectedDraft = btn.dataset.draft || btn.textContent.trim();
            const p = parseFloat(btn.dataset.price || '0');
            basePrice = isNaN(p) ? basePrice : p;

            updatePrice();
          });
        });
      }

      function getTotalPrice() {
        const qty = parseInt(document.getElementById('quantity').value || 1);
        return basePrice * qty;
      }

      function updatePrice() {
        const total = getTotalPrice();
        document.getElementById('product-price').textContent = '$' + basePrice.toFixed(2) + ' per 16 oz pour';
        document.getElementById('add-to-cart-btn').textContent = 'Add to Cart - $' + total.toFixed(2);
      }

      function changeQuantity(delta) {
        const input = document.getElementById('quantity');
        const newVal = Math.max(1, Math.min(50, (parseInt(input.value) || 1) + delta));
        input.value = newVal;
        updatePrice();
      }

      async function updateCartCount() {
        try {
          const res = await fetch('/cart.js', { credentials: 'same-origin' });
          if (res.ok) {
            const cart = await res.json();
            document.getElementById('cart-count').textContent = cart.item_count || 0;
            return;
          }
        } catch (e) {}
        // Fallback to localStorage used by legacy pages
        try {
          const local = JSON.parse(localStorage.getItem('wtf-cart') || '[]');
          document.getElementById('cart-count').textContent = local.length;
        } catch {
          document.getElementById('cart-count').textContent = '0';
        }
      }

      function validateSelections() {
        if (!selectedDraft) {
          alert('‚ùó Please choose a draft.');
          return false;
        }
        return true;
      }

      async function addToCart() {
        if (!validateSelections()) return;

        const btn = document.getElementById('add-to-cart-btn');
        const original = btn.textContent;
        btn.textContent = '‚è≥ Adding...';
        btn.disabled = true;

        const variantId = window.DRAFT_POURS_VARIANT_ID;
        const quantity = parseInt(document.getElementById('quantity').value || 1);
        const comments = (document.getElementById('order-comments').value || '').trim();

        const properties = {
          Size: '16 oz',
          Draft: selectedDraft,
          Comments: comments,
        };

        try {
          if (variantId) {
            const body = new URLSearchParams();
            body.set('id', String(variantId));
            body.set('quantity', String(quantity));
            Object.keys(properties).forEach((k) => {
              const v = properties[k];
              if (v !== '' && v !== null && v !== undefined) {
                body.set(`properties[${k}]`, String(v));
              }
            });

            const res = await fetch('/cart/add.js', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                Accept: 'application/json',
              },
              credentials: 'same-origin',
              body,
            });

            if (!res.ok) {
              let msg = 'Add to cart failed';
              try {
                const data = await res.json();
                msg = data.description || data.message || msg;
              } catch {}
              throw new Error(msg);
            }
          } else {
            // Dev fallback: localStorage cart if no variant configured
            const order = {
              id: 'draft-' + Date.now() + '-' + Math.random().toString(36).slice(2),
              product: 'Draft Pours',
              ...properties,
              quantity,
              price: getTotalPrice().toFixed(2),
              timestamp: new Date().toISOString(),
              dateAdded: new Date().toLocaleDateString(),
            };
            let cart = [];
            try {
              cart = JSON.parse(localStorage.getItem('wtf-cart') || '[]');
            } catch {
              cart = [];
            }
            cart.push(order);
            localStorage.setItem('wtf-cart', JSON.stringify(cart));
          }

          await updateCartCount();

          const success = document.getElementById('success-message');
          success.innerHTML =
            `‚úÖ <strong>Added to cart!</strong><br>
           üç∫ Draft Pours<br>
           üìã Draft: ${properties['Draft']}<br>` +
            (comments ? `üí¨ ${comments}<br>` : '') +
            `üî¢ Qty: ${quantity}`;
          success.classList.add('show');
          success.scrollIntoView({ behavior: 'smooth', block: 'center' });

          document.dispatchEvent(new CustomEvent('draft:added', { detail: { variantId, ...properties, quantity } }));
        } catch (err) {
          console.error('Add to cart error:', err);
          alert('‚ùå ' + (err && err.message ? err.message : 'Error adding to cart. Please try again.'));
        } finally {
          setTimeout(() => {
            btn.textContent = original;
            btn.disabled = false;
            document.getElementById('success-message').classList.remove('show');
          }, 4000);
        }
      }
    </script>
  </body>
</html>
