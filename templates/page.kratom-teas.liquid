{% comment %}
  templates/page.kratom-teas.liquid
  Custom Kratom Tea builder (AJAX cart)
{% endcomment %}
{% assign tea_variant_id = page.metafields.custom.kratom_variant_id
  | default: settings.kratom_tea_variant_id
  | default: 0
%}
{% assign extra_pump_price = page.metafields.custom.extra_pump_price
  | default: settings.kratom_extra_pump_price
  | default: 0.5
%}
{% assign included_pumps = page.metafields.custom.included_pumps | default: 2 %}
{% assign price_medium = settings.kratom_price_medium | default: '9.00' %}
{% assign price_large = settings.kratom_price_large | default: '15.00' %}
{% assign price_gallon = settings.kratom_price_gallon | default: '100.00' %}

<!doctype html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Custom Kratom Tea - WTF | Welcome To Florida</title>

    <style>
      :root{
        --primary: {{ settings.color_primary | default: '#ff6600' }};
        --success: {{ settings.color_success | default: '#28a745' }};
        --bg: {{ settings.color_background | default: '#f8f9fa' }};
        --text: {{ settings.color_text | default: '#333333' }};
      }
      *{box-sizing:border-box;margin:0;padding:0}
      body{font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,sans-serif;background:var(--bg);color:var(--text);line-height:1.6}
      .header{background:var(--primary);color:#fff;padding:15px 0;text-align:center;font-size:24px;font-weight:700}
      .container{max-width:1100px;margin:0 auto;padding:20px}
      .back-link{display:inline-block;color:var(--primary);text-decoration:none;font-weight:700;font-size:16px;margin-bottom:20px;padding:10px 15px;border:2px solid var(--primary);border-radius:6px;transition:.2s}
      .back-link:hover{background:var(--primary);color:#fff}
      .grid{display:grid;grid-template-columns:1fr 1fr;gap:32px;align-items:start}
      .product-image{width:100%;max-width:420px;border-radius:12px;box-shadow:0 6px 18px rgba(0,0,0,.08)}
      .panel{background:#fff;padding:24px;border-radius:12px;box-shadow:0 6px 18px rgba(0,0,0,.08)}
      .title{font-size:32px;font-weight:800;margin-bottom:6px}
      .price-row{font-size:18px;font-weight:700;color:var(--primary);margin-bottom:10px}
      .desc{color:#666;margin-bottom:18px}
      .section{margin:22px 0;padding-bottom:16px;border-bottom:1px solid #eee}
      .section:last-child{border-bottom:none}
      .section h3{font-size:18px;font-weight:800;margin-bottom:12px}
      .size-grid{display:grid;grid-template-columns:repeat(3,1fr);gap:10px}
      .pill, .flavor{padding:14px;border:2px solid #ddd;border-radius:10px;background:#fff;cursor:pointer;transition:.2s;text-align:center;font-size:14px}
      .pill:hover{border-color:var(--primary);transform:translateY(-2px);box-shadow:0 6px 12px rgba(255,102,0,.2)}
      .pill.selected{background:var(--primary);color:#fff;border-color:var(--primary)}
      .strain-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(140px,1fr));gap:10px}
      .flavor-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(120px,1fr));gap:8px}
      .flavor:hover{border-color:var(--success);transform:translateY(-1px)}
      .flavor.selected{background:var(--success);color:#fff;border-color:var(--success)}
      .note{background:#e7f3ff;padding:12px;border-radius:8px;margin-bottom:12px;font-size:14px}
      .qty{display:flex;align-items:center;gap:12px}
      .qty .btn{width:40px;height:40px;border:2px solid var(--primary);background:#fff;color:var(--primary);border-radius:50%;font-weight:800;cursor:pointer;transition:.2s}
      .qty .btn:hover{background:var(--primary);color:#fff;transform:scale(1.05)}
      .qty input{width:82px;text-align:center;padding:10px;border:2px solid #ddd;border-radius:8px;font-size:16px}
      textarea{width:100%;padding:12px;border:2px solid #ddd;border-radius:8px;resize:vertical;font-size:14px}
      .btn-primary{width:100%;padding:16px;background:var(--primary);color:#fff;border:none;border-radius:10px;font-size:18px;font-weight:800;cursor:pointer;transition:.2s;margin-top:14px}
      .btn-primary:hover{background:#e55a00;transform:translateY(-2px);box-shadow:0 10px 18px rgba(255,102,0,.25)}
      .btn-primary[disabled]{background:#bbb;cursor:not-allowed;transform:none;box-shadow:none}
      .success{display:none;margin-top:12px;background:#d4edda;color:#155724;border:1px solid #c3e6cb;border-radius:8px;padding:12px;font-size:14px}
      .success.show{display:block}
      .cart-badge{position:fixed;top:16px;right:16px;background:var(--primary);color:#fff;padding:8px 14px;border-radius:999px;font-weight:800;box-shadow:0 10px 18px rgba(255,102,0,.25);z-index:50}
      .hidden{display:none}
      @media(max-width: 820px){.grid{grid-template-columns:1fr}}
    </style>
  </head>
  <body>
    <div class="header">WTF | Welcome To Florida</div>
    <div class="cart-badge">Cart: <span id="cart-count">0</span></div>

    <div class="container">
      <a href="/" class="back-link">‚Üê Back to Menu</a>

      <div class="grid">
        <div>
          <img src="{{ 'kratom_teas_150x150.png' | asset_url }}" alt="Custom Kratom Tea" class="product-image">
        </div>

        <div class="panel">
          <h1 class="title">Custom Kratom Tea</h1>
          <div class="price-row">
            Price: <span id="live-price">${{ price_medium }}</span>
          </div>
          <p class="desc">
            Choose your size, strain, and flavors. We include <strong>{{ included_pumps }}</strong> pumps; extra pumps
            are <strong>${{ extra_pump_price }}</strong> each.
          </p>

          <!-- QUICK BUTTON (example). Hidden by default; change .hidden to show -->
          <div class="section hidden">
            <h3>Quick add (example)</h3>
            <button
              class="pill"
              data-add-to-cart
              data-variant-id="{{ tea_variant_id }}"
              data-qty="1"
              data-prop-Size="Medium"
              data-prop-Flavors="Lemon"
              data-prop-Comments="Quick add"
            >
              Add a Medium Lemon Tea
            </button>
          </div>

          <!-- SIZE -->
          <div class="section">
            <h3>‚òï Choose Your Size</h3>
            <div class="size-grid" id="size-grid">
              <button type="button" class="pill" data-size="Medium" data-price="{{ price_medium }}">
                Medium<br>
                <small>12 oz ‚Äì ${{ price_medium }}</small>
              </button>
              <button type="button" class="pill" data-size="Large" data-price="{{ price_large }}">
                Large<br>
                <small>16 oz ‚Äì ${{ price_large }}</small>
              </button>
              <button type="button" class="pill" data-size="Gallon" data-price="{{ price_gallon }}">
                Gallon<br>
                <small>128 oz ‚Äì ${{ price_gallon }}</small>
              </button>
            </div>
          </div>

          <!-- STRAIN -->
          <div class="section">
            <h3>üåø Choose Your Strain</h3>
            <div class="strain-grid" id="strain-grid">
              <button type="button" class="pill" data-strain="Green">Green</button>
              <button type="button" class="pill" data-strain="Red">Red</button>
              <button type="button" class="pill" data-strain="White">White</button>
              <button type="button" class="pill" data-strain="Yellow">Yellow</button>
              <button type="button" class="pill" data-strain="Mix">Mix (¬Ω & ¬Ω)</button>
            </div>
          </div>

          <!-- FLAVORS -->
          <div class="section">
            <h3>üçã Flavors & Pumps</h3>
            <div class="note">
              Included pumps: <strong id="included-pumps">{{ included_pumps }}</strong>. Extra pumps cost
              <strong>${{ extra_pump_price }}</strong> each.<br>
              Add or remove flavors below‚Äîextra pumps will auto-calculate.
            </div>
            <div class="flavor-grid" id="flavor-grid">
              {% assign flavors = "Lemon,Lime,Orange,Blood Orange,Strawberry,Raspberry,Blueberry,Coconut,Mango,Watermelon,Simple Syrup,Sour Apple,Dragon Fruit,Blackberry,S'mores,Pumpkin Spice,Cranberry,Grenadine,Lavender,Chocolate,Caramel,Maple,Agave,Hazelnut,Rose,Passion Fruit,Hibiscus"
                | split: ','
              %}
              {% for f in flavors %}
                <button type="button" class="flavor" data-flavor="{{ f | escape }}">{{ f }}</button>
              {% endfor %}
            </div>
            <div id="pump-distribution" class="note" style="display:none"></div>
          </div>

          <!-- EXTRA PUMPS -->
          <div class="section">
            <h3>
              ‚ûï Additional Pumps (<span id="pump-price">${{ extra_pump_price }}</span> each)
            </h3>
            <div class="qty">
              <button type="button" class="btn" data-extra-delta="-1">‚àí</button>
              <input id="extra-pumps" type="number" min="0" value="0">
              <button type="button" class="btn" data-extra-delta="1">+</button>
              <strong id="extra-pumps-cost" style="margin-left:6px"></strong>
            </div>
          </div>

          <!-- COMMENTS -->
          <div class="section">
            <h3>üí¨ Special Requests & Comments</h3>
            <textarea id="comments" rows="3" placeholder="Any special requests?"></textarea>
          </div>

          <!-- QTY -->
          <div class="section">
            <h3>üî¢ Quantity</h3>
            <div class="qty">
              <button type="button" class="btn" data-qty-delta="-1">‚àí</button>
              <input id="quantity" type="number" min="1" value="1">
              <button type="button" class="btn" data-qty-delta="1">+</button>
            </div>
          </div>

          <!-- RECOMMENDED FORM (posts to /cart/add.js via WTF.addToCart) -->
          <form id="wtf-kratom-form" class="hidden">
            <input type="hidden" name="id" value="{{ tea_variant_id }}">
            <input type="number" name="quantity" value="1" min="1">
            <input type="hidden" name="properties[Size]" value="">
            <input type="hidden" name="properties[Flavors]" value="">
            <input type="hidden" name="properties[Extra Pumps]" value="0">
            <input type="hidden" name="properties[Pump Distribution]" value="">
            <input type="hidden" name="properties[Comments]" value="">
          </form>

          <!-- ACTION -->
          <button id="add-btn" class="btn-primary">Add to Cart</button>
          <div id="success" class="success"></div>
        </div>
      </div>
    </div>

    <script>
      (function () {
        const VARIANT_ID = Number('{{ tea_variant_id }}') || 0;
        const INCLUDED_PUMPS = Number('{{ included_pumps }}') || 2;
        const EXTRA_PUMP_PRICE = Number('{{ extra_pump_price }}') || 0.5;

        // Price by size
        const SIZE_PRICE = {
          Medium: Number('{{ price_medium }}') || 9,
          Large: Number('{{ price_large }}') || 15,
          Gallon: Number('{{ price_gallon }}') || 100,
        };

        // State
        let selectedSize = 'Medium';
        let selectedStrain = null;
        let selectedFlavors = new Set();
        let extraPumps = 0;
        let qty = 1;

        // Elements
        const $livePrice = document.getElementById('live-price');
        const $extraPumps = document.getElementById('extra-pumps');
        const $extraCost = document.getElementById('extra-pumps-cost');
        const $qty = document.getElementById('quantity');
        const $success = document.getElementById('success');
        const $pumpDist = document.getElementById('pump-distribution');

        // Helpers
        function money(n) {
          return '$' + (Math.round(n * 100) / 100).toFixed(2);
        }

        function calcUnitPrice() {
          const base = SIZE_PRICE[selectedSize] || 0;
          return base + extraPumps * EXTRA_PUMP_PRICE;
        }

        function renderPrice() {
          const unit = calcUnitPrice();
          $livePrice.textContent = money(unit * qty);
          $extraCost.textContent = extraPumps > 0 ? `(+${money(extraPumps * EXTRA_PUMP_PRICE)})` : '';
          document.getElementById('add-btn').textContent = `Add to Cart ‚Äî ${money(unit * qty)}`;
        }

        function renderPumpDistribution() {
          // Simple split across chosen flavors; show only if flavors selected
          const flavors = Array.from(selectedFlavors);
          if (!flavors.length) {
            $pumpDist.style.display = 'none';
            return;
          }
          let html = '<strong>üéØ Pump Distribution</strong><br>';
          const totalIncluded = INCLUDED_PUMPS;
          const per = Math.floor(totalIncluded / flavors.length);
          const remainder = totalIncluded % flavors.length;
          flavors.forEach((f, i) => {
            const pumps = per + (i < remainder ? 1 : 0);
            html += `‚Ä¢ ${f}: ${pumps} pump${pumps !== 1 ? 's' : ''}<br>`;
          });
          $pumpDist.innerHTML = html;
          $pumpDist.style.display = 'block';
        }

        function autoExtraPumps() {
          // If more flavors than included pumps, auto set extra to cover (1 extra per extra flavor)
          const over = Math.max(0, selectedFlavors.size - INCLUDED_PUMPS);
          if (over > extraPumps) {
            extraPumps = over;
            $extraPumps.value = extraPumps;
          }
        }

        function validate() {
          if (!VARIANT_ID) {
            alert('This item is not available yet. Please set a Variant ID in theme settings.');
            return false;
          }
          if (!selectedSize) {
            alert('Please choose a size.');
            return false;
          }
          if (!selectedStrain) {
            alert('Please choose a strain.');
            return false;
          }
          if (!selectedFlavors.size) {
            alert('Please choose at least one flavor.');
            return false;
          }
          return true;
        }

        // Wire size
        document.getElementById('size-grid').addEventListener('click', (e) => {
          const btn = e.target.closest('[data-size]');
          if (!btn) return;
          document.querySelectorAll('#size-grid .pill').forEach((b) => b.classList.remove('selected'));
          btn.classList.add('selected');
          selectedSize = btn.dataset.size;
          renderPrice();
        });

        // Default size select Medium
        (function () {
          const m = document.querySelector('#size-grid [data-size="Medium"]');
          if (m) {
            m.click();
          }
        })();

        // Wire strain
        document.getElementById('strain-grid').addEventListener('click', (e) => {
          const btn = e.target.closest('[data-strain]');
          if (!btn) return;
          document.querySelectorAll('#strain-grid .pill').forEach((b) => b.classList.remove('selected'));
          btn.classList.add('selected');
          selectedStrain = btn.dataset.strain;
        });

        // Wire flavors
        document.getElementById('flavor-grid').addEventListener('click', (e) => {
          const btn = e.target.closest('[data-flavor]');
          if (!btn) return;
          const val = btn.dataset.flavor;
          if (btn.classList.contains('selected')) {
            btn.classList.remove('selected');
            selectedFlavors.delete(val);
          } else {
            btn.classList.add('selected');
            selectedFlavors.add(val);
          }
          autoExtraPumps();
          renderPumpDistribution();
          renderPrice();
        });

        // Quantity controls
        document.querySelectorAll('[data-qty-delta]').forEach((b) => {
          b.addEventListener('click', () => {
            const d = Number(b.dataset.qtyDelta);
            qty = Math.max(1, (Number($qty.value) || 1) + d);
            $qty.value = qty;
            renderPrice();
          });
        });
        $qty.addEventListener('input', () => {
          qty = Math.max(1, Number($qty.value) || 1);
          $qty.value = qty;
          renderPrice();
        });

        // Extra pumps controls
        document.querySelectorAll('[data-extra-delta]').forEach((b) => {
          b.addEventListener('click', () => {
            const d = Number(b.dataset.extraDelta);
            extraPumps = Math.max(0, (Number($extraPumps.value) || 0) + d);
            $extraPumps.value = extraPumps;
            renderPrice();
          });
        });
        $extraPumps.addEventListener('input', () => {
          extraPumps = Math.max(0, Number($extraPumps.value) || 0);
          $extraPumps.value = extraPumps;
          renderPrice();
        });

        // Quick button (data-add-to-cart)
        document.addEventListener('click', async (e) => {
          const btn = e.target.closest('[data-add-to-cart]');
          if (!btn) return;
          e.preventDefault();
          try {
            const id = Number(btn.dataset.variantId);
            const quantity = Number(btn.dataset.qty) || 1;
            const props = {};
            Object.keys(btn.dataset).forEach((k) => {
              if (k.startsWith('prop')) {
                const key = k.replace(/^prop/, '').replace(/^-*/, '').replace(/_/g, ' ').trim();
                props[key] = btn.dataset[k];
              }
            });
            await WTF.addToCart({ id, quantity, properties: props });
            toastSuccess('Added to cart.');
          } catch (err) {
            alert('Add failed.');
            console.error(err);
          }
        });

        function toastSuccess(msg) {
          $success.innerHTML = `<strong>‚úÖ ${msg}</strong>`;
          $success.classList.add('show');
          setTimeout(() => $success.classList.remove('show'), 3500);
        }

        // Main Add
        document.getElementById('add-btn').addEventListener('click', async () => {
          if (!validate()) return;

          // Build properties
          const props = {
            Size: selectedSize,
            Flavors: Array.from(selectedFlavors).join(', '),
            'Extra Pumps': String(extraPumps),
            'Pump Distribution': $pumpDist.innerText || '',
            Comments: document.getElementById('comments').value.trim(),
          };

          const payload = { id: VARIANT_ID, quantity: qty, properties: props };

          // Disable button while processing
          const btn = document.getElementById('add-btn');
          const old = btn.textContent;
          btn.disabled = true;
          btn.textContent = 'Adding‚Ä¶';

          try {
            await WTF.addToCart(payload);
            toastSuccess('Custom Kratom Tea added to cart!');
          } catch (err) {
            console.error(err);
            alert('‚ùå Error adding to cart.');
          } finally {
            btn.disabled = false;
            renderPrice();
          }
        });

        // Sync cart badge on load/changes
        document.addEventListener('cart:refreshed', (e) => {
          const el = document.getElementById('cart-count');
          if (el && e.detail) el.textContent = e.detail.item_count || 0;
        });
        if (window.WTF && WTF.updateCartCount) WTF.updateCartCount();

        // Initial renders
        renderPrice();
      })();
    </script>
  </body>
</html>
